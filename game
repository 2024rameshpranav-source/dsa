import java.util.LinkedList;
import java.util.Random;
import java.util.Scanner;

public class LinkedListSlotMachine {
    
    // Symbols available in the slot machine
    private static final String[] SYMBOLS = {"🍒", "🔔", "🍋", "7️⃣", "⭐"};
    
    // Slot machine configuration
    private static final int ROWS = 3;
    private static final int COLS = 3;
    private static final int BET_PER_LINE = 10;

    // LinkedList array (each row is a linked list)
    private static LinkedList<String>[] grid = new LinkedList[ROWS];
    private static Random random = new Random();

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("🎰 Welcome to the LinkedList Slot Machine!");
        System.out.println("Bet per line: " + BET_PER_LINE);
        System.out.println("Press ENTER to spin...");

        while (true) {
            scanner.nextLine();  // wait for user to press Enter
            playSlotMachine();
            System.out.print("Play again? (y/n): ");
            String again = scanner.nextLine();
            if (!again.equalsIgnoreCase("y")) break;
        }

        System.out.println("Thanks for playing! 👋");
        scanner.close();
    }

    // Create a random grid using LinkedLists
    private static void spinGrid() {
        for (int r = 0; r < ROWS; r++) {
            grid[r] = new LinkedList<>(); // create a new linked list for each row
            for (int c = 0; c < COLS; c++) {
                // add a random symbol to the row
                grid[r].add(SYMBOLS[random.nextInt(SYMBOLS.length)]);
            }
        }
    }

    // Display the grid on console
    private static void renderGrid() {
        System.out.println("------------------");
        for (LinkedList<String> row : grid) {
            for (String symbol : row) {
                System.out.print(symbol + "  ");
            }
            System.out.println();
        }
        System.out.println("------------------");
    }

    // Check if all symbols in a row are the same (a win)
    private static boolean isWinningLine(LinkedList<String> row) {
        String first = row.get(0);
        for (String symbol : row) {
            if (!symbol.equals(first)) {
                return false; // not all same
            }
        }
        return true; // all symbols match
    }

    // Main game logic
    private static void playSlotMachine() {
        spinGrid();        // generate new random grid
        renderGrid();      // display it to the user

        int totalWin = 0;
        for (int i = 0; i < ROWS; i++) {
            if (isWinningLine(grid[i])) {
                totalWin += BET_PER_LINE * 2;
                System.out.println("🏆 Line " + (i + 1) + " is a WIN!");
            }
        }

        if (totalWin > 0) {
            System.out.println("🎉 You won " + totalWin + " credits!");
        } else {
            System.out.println("😢 No win this round. Try again!");
        }
    }
}

